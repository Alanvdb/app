<?php
/**
 * This class has been auto-generated by PHP-DI.
 */
class CompiledContainer extends DI\CompiledContainer{
    const METHOD_MAPPING = array (
  'Psr\\Http\\Message\\ServerRequestInterface' => 'get1',
  'GuzzleHttp\\Psr7\\HttpFactory' => 'get2',
  'Psr\\Http\\Message\\RequestFactoryInterface' => 'get3',
  'Psr\\Http\\Message\\ResponseFactoryInterface' => 'get4',
  'Psr\\Http\\Message\\StreamFactoryInterface' => 'get5',
  'Psr\\Http\\Message\\UploadedFileFactoryInterface' => 'get6',
  'Psr\\Http\\Message\\UriFactoryInterface' => 'get7',
  'AlanVdb\\Router\\Factory\\RouterFactory' => 'get8',
  'AlanVdb\\Router\\RouteCollection' => 'get9',
  'AlanVdb\\Router\\Definition\\RequestMatcherInterface' => 'get10',
  'AlanVdb\\Router\\Definition\\UriGeneratorInterface' => 'get11',
  'Twig\\Environment' => 'get12',
  'Doctrine\\ORM\\EntityManagerInterface' => 'get13',
);

    protected function get1()
    {
        return $this->resolveFactory(static function () {
        return \GuzzleHttp\Psr7\ServerRequest::fromGlobals();
    }, 'Psr\\Http\\Message\\ServerRequestInterface');
    }

    protected function get2()
    {
        $object = new GuzzleHttp\Psr7\HttpFactory();
        return $object;
    }

    protected function get3()
    {
        return $this->delegateContainer->get('GuzzleHttp\\Psr7\\HttpFactory');
    }

    protected function get4()
    {
        return $this->delegateContainer->get('GuzzleHttp\\Psr7\\HttpFactory');
    }

    protected function get5()
    {
        return $this->delegateContainer->get('GuzzleHttp\\Psr7\\HttpFactory');
    }

    protected function get6()
    {
        return $this->delegateContainer->get('GuzzleHttp\\Psr7\\HttpFactory');
    }

    protected function get7()
    {
        return $this->delegateContainer->get('GuzzleHttp\\Psr7\\HttpFactory');
    }

    protected function get8()
    {
        $object = new AlanVdb\Router\Factory\RouterFactory();
        return $object;
    }

    protected function get9()
    {
        return $this->resolveFactory(static function ($c) {
        $routeCollector = new \AlanVdb\Router\RouteCollector(
            new \AlanVdb\Router\RouteCollection(),
            $c->get(\Psr\Http\Message\ServerRequestInterface::class),
            $c->get(\Psr\Http\Message\ResponseFactoryInterface::class),
            $c->get(\Psr\Http\Message\StreamFactoryInterface::class),
            $c->get(\AlanVdb\Router\Definition\UriGeneratorInterface::class),
            $c->get(\Doctrine\ORM\EntityManagerInterface::class)
        );
        return $routeCollector->collectRoutes(require \App\ROOT . DIRECTORY_SEPARATOR . $_ENV['ROUTES_CONFIG']);
    }, 'AlanVdb\\Router\\RouteCollection');
    }

    protected function get10()
    {
        return $this->resolveFactory(static function($c) {
        //$routeCollection = $c->get(RouteCollection::class);
        $factory = $c->get(\AlanVdb\Router\Factory\RouterFactory::class);
        return $factory->createRequestMatcher();
    }, 'AlanVdb\\Router\\Definition\\RequestMatcherInterface');
    }

    protected function get11()
    {
        return $this->resolveFactory(static function($c) {
        //$routeCollection = $c->get(RouteCollection::class);
        $factory = $c->get(\AlanVdb\Router\Factory\RouterFactory::class);
        return $factory->createUriGenerator();
    }, 'AlanVdb\\Router\\Definition\\UriGeneratorInterface');
    }

    protected function get12()
    {
        return $this->resolveFactory(static function () {
        $loader = new \Twig\Loader\FilesystemLoader($_ENV['TEMPLATES_DIRECTORY']);
        return new \Twig\Environment($loader, [
            'cache' => $_ENV['RENDERER_CACHE_DIRECTORY'],
        ]);
    }, 'Twig\\Environment');
    }

    protected function get13()
    {
        return $this->resolveFactory(static function () {
        $dbDriver = 'pdo_' . $_ENV['DB_DRIVER'];

        if ($dbDriver === 'pdo_sqlite') {
            $dbParams = ['path' => $_ENV['DB_PATH']];
        } elseif ($dbDriver === 'pdo_mysql') {
            $dbParams = [
                'host' => $_ENV['DB_HOST'],
                'dbname' => $_ENV['DB_NAME'],
                'user' => $_ENV['DB_USER'],
                'password' => $_ENV['DB_PASSWORD']
            ];
        }
        $dbParams['driver'] = $dbDriver;

        return (new \AlanVdb\ORM\Manager\Factory\DoctrineEntityManagerFactory())->createEntityManager(
            $dbParams,
            explode(',', $_ENV['ENTITY_DIRECTORIES']),
            $_ENV['MODEL_PROXY_DIRECTORY'],
            $_ENV['MODEL_PROXY_NAMESPACE'],
            boolval($_ENV['DEBUG_MODE'])
        );
    }, 'Doctrine\\ORM\\EntityManagerInterface');
    }

}
